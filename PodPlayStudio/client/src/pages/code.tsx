import { useState } from 'react';

export default function CodePage() {
  const [code, setCode] = useState('// Type your code here\n');
  const [output, setOutput] = useState('');
  const [isExecuting, setIsExecuting] = useState(false);
  
  const handleExecute = async () => {
    if (!code.trim()) return;
    
    setIsExecuting(true);
    setOutput('');
    
    // TODO: Add actual API call to execute code
    try {
      // Simulating API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      setOutput(
        `// This is a placeholder code execution response\n` +
        `// In the actual implementation, this would be the result of executing your code\n\n` +
        `Executed code:\n${code}\n\n` +
        `Output:\nHello, world! This is a simulated code execution.`
      );
    } catch (error) {
      console.error('Error executing code:', error);
      setOutput('Error executing code. Please try again.');
    } finally {
      setIsExecuting(false);
    }
  };
  
  const handleGenerateCode = async () => {
    setIsExecuting(true);
    
    // TODO: Add actual API call to Gemini
    try {
      // Simulating API call delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      setCode(
        `// Example function generated by Gemini API\n` +
        `function calculateFibonacci(n) {\n` +
        `  if (n <= 1) return n;\n` +
        `  \n` +
        `  let fib = [0, 1];\n` +
        `  for (let i = 2; i <= n; i++) {\n` +
        `    fib[i] = fib[i-1] + fib[i-2];\n` +
        `  }\n` +
        `  \n` +
        `  return fib[n];\n` +
        `}\n` +
        `\n` +
        `// Test the function\n` +
        `console.log(calculateFibonacci(10)); // Should output 55\n`
      );
    } catch (error) {
      console.error('Error generating code:', error);
    } finally {
      setIsExecuting(false);
    }
  };
  
  return (
    <div className="max-w-6xl mx-auto py-4 px-2">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Code</h1>
        
        <div className="flex gap-2">
          <select className="p-2 border rounded-md bg-background">
            <option value="javascript">JavaScript</option>
            <option value="python">Python</option>
            <option value="typescript">TypeScript</option>
          </select>
          
          <button
            onClick={handleGenerateCode}
            disabled={isExecuting}
            className="px-4 py-2 bg-secondary text-secondary-foreground rounded-md hover:bg-secondary/90 transition-colors disabled:opacity-50"
          >
            Generate Code
          </button>
          
          <button
            onClick={handleExecute}
            disabled={isExecuting || !code.trim()}
            className="px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors disabled:opacity-50"
          >
            {isExecuting ? 'Executing...' : 'Execute'}
          </button>
        </div>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <div className="border rounded-md p-1 font-mono text-sm">
            <textarea
              value={code}
              onChange={(e) => setCode(e.target.value)}
              className="w-full h-[500px] p-2 bg-card resize-none focus:outline-none"
              spellCheck={false}
            />
          </div>
        </div>
        
        <div>
          <div className="border rounded-md p-3 h-[500px] bg-card overflow-auto font-mono text-sm">
            {isExecuting ? (
              <div className="flex justify-center items-center h-full">
                <div className="animate-pulse">Executing code...</div>
              </div>
            ) : output ? (
              <pre className="whitespace-pre-wrap">{output}</pre>
            ) : (
              <div className="text-muted-foreground">
                Code execution output will appear here
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}